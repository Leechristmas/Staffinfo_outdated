USE STAFFINFO_TESTS
GO
-------------------------------------------------------------------------
---CREATE THE NEW TABLES
-------------------------------------------------------------------------
--ПОЛЬЗОВАТЕЛИ
CREATE TABLE USERS(
	ID INT PRIMARY KEY IDENTITY,
	USER_LOGIN VARCHAR(20) NOT NULL,
	USER_PASSWORD VARCHAR(20) NOT NULL,
	ACCESS_LEVEL INT NOT NULL,
	LAST_NAME VARCHAR(50) NOT NULL,
	FIRST_NAME VARCHAR(50),
	MIDDLE_NAME VARCHAR(50));
GO
--ДОЛЖНОСТИ
CREATE TABLE POST(
		ID INT PRIMARY KEY IDENTITY,
		POST_TITLE VARCHAR(64) NOT NULL,
		SERVICE_ID INT NOT NULL,
		POST_WEIGHT INT NOT NULL);
GO
--ЗВАНИЯ
CREATE TABLE RANK(
		ID INT PRIMARY KEY IDENTITY,
		RANK_TITLE VARCHAR(64) NOT NULL UNIQUE,
		RANK_WEIGHT INT NOT NULL,	--"ВЕСОВОЙ" КОЭФФИЦИЕНТ ЗВАНИЯ
		PERIOD FLOAT NOT NULL);		--СРОК ВЫСЛУГИ
GO
--КЛАССНОСТЬ 
CREATE TABLE CLASINESS (
		ID INT PRIMARY KEY IDENTITY,
		EMPLOYEE_ID	INT NOT NULL,
		ORDER_NUMBER INT NOT NULL,
		CLASINESS_DATE DATE NOT NULL,
		CLASINESS_LEVEL INT NOT NULL,
		DESCRIPTION	VARCHAR(64));
GO
--КОНТРАКТЫ
CREATE TABLE CONTRACT (
		ID	INT PRIMARY KEY IDENTITY,
		EMPLOYEE_ID	INT NOT NULL,
		START_DATE	DATE NOT NULL,
		FINISH_DATE	DATE NOT NULL,
		DESCRIPTION	VARCHAR(64));	
GO
--УЧЕБНЫЕ ЗАВЕДЕНИЯ
CREATE TABLE EDUCATIONAL_INSTITUTION(
		ID INT PRIMARY KEY IDENTITY,
		INST_TITLE VARCHAR(64) NOT NULL UNIQUE, 
		DESCRIPTION VARCHAR(64), 
		INST_TYPE VARCHAR(64) NOT NULL);	
GO
--ПРОЦЕСС ОБУЧЕНИЯ В УЧРЕЖДЕНИИ ОБРАЗОВАНИЯ
CREATE TABLE EDUCATION_TIME (
		ID INT PRIMARY KEY IDENTITY,
		EMPLOYEE_ID	INT NOT NULL,
		START_DATE DATE NOT NULL,
		FINISH_DATE DATE NOT NULL,
		SPECIALITY_ID INT NOT NULL,
		INSTITUTION_ID INT NOT NULL,
		DESCRIPTION VARCHAR(64));
GO
--БЛАГОДАРНОСТИ
CREATE TABLE GRATITUDE (
		ID	INT PRIMARY KEY IDENTITY,
		EMPLOYEE_ID	INT NOT NULL,
		DESCRIPTION	VARCHAR(64),
		GRATITUDE_DATE DATE NOT NULL);
GO
--ОТПУСКА	
CREATE TABLE HOLIDAY_TIME (
		ID	INT PRIMARY KEY IDENTITY,
		EMPLOYEE_ID	INT NOT NULL,
		DESCRIPTION	VARCHAR(64),
		START_HOLIDAY_DATE DATE NOT NULL,
		FINISH_HOLIDAY_DATE DATE NOT NULL);
GO
--БОЛЬНИЧНЫЕ
CREATE TABLE HOSPITAL_TIME(
		ID INT PRIMARY KEY IDENTITY, 
		DISEASED_ID INT NOT NULL, 
		DESCRIPTION VARCHAR(64), 
		START_HOSPITAL_TIME DATE NOT NULL, 
		FINISH_HOSPITAL_TIME DATE NOT NULL);
GO
--ПРОХОЖДЕНИЕ ВОИНСКОЙ СЛУЖБЫ
CREATE TABLE MILITARY_PROCESS (
	ID INT PRIMARY KEY IDENTITY,
	EMPLOYEE_ID INT NOT NULL,
	DESCRIPTION VARCHAR(64),
	START_DATE DATE NOT NULL,
	FINISH_DATE DATE NOT NULL,
	MILITARY_UNIT_ID INT NOT NULL);
GO
--ПРИСВОЕНИЕ ДОЛЖНОСТИ
CREATE TABLE POST_ASSIGNMENT(
	ID INT PRIMARY KEY IDENTITY,
	EMPLOYEE_ID INT NOT NULL,
	DESCRIPTION	VARCHAR(240),
	ASSIGNMENT_DATE	DATE NOT NULL,
	PREV_POST_ID INT,
	NEW_POST_ID	INT NOT NULL,
	ORDER_NUMBER INT NOT NULL);
GO
--ПРИСВОЕНИЕ ЗВАНИЙ
CREATE TABLE RANK_ASSIGNMENT(
	ID INT PRIMARY KEY IDENTITY,
	EMPLOYEE_ID	INT NOT NULL,
	DESCRIPTION	VARCHAR(64),
	ASSIGNMENT_DATE DATE NOT NULL,
	PREV_RANK_ID INT,
	NEW_RANK_ID	INT NOT NULL,
	ORDER_NUMBER INT NOT NULL);
GO
--ТИП РОДСТВА
CREATE TABLE RELATIVE_TYPE(
		ID INT PRIMARY KEY IDENTITY,
		RELATIVE_TYPE VARCHAR(64) UNIQUE);
GO
--РОДСТВЕННИКИ СЛУЖАЩИХ
CREATE TABLE RELATIVE(
	ID INT PRIMARY KEY IDENTITY,
	EMPLOYEE_ID INT NOT NULL,
	RELATION_TYPE VARCHAR(30),
	FIRST_NAME VARCHAR(64) NOT NULL,
	MIDDLE_NAME VARCHAR(64) NOT NULL,
	LAST_NAME VARCHAR(64) NOT NULL,
	BORN_DATE DATE NOT NULL,
	DESCRIPTION VARCHAR(240));
GO
--ВЫГОВОРЫ
CREATE TABLE REPRIMAND(
	ID INT PRIMARY KEY IDENTITY,
	EMPLOYEE_ID INT NOT NULL,
	SUM_OF_REPRIMAND FLOAT NOT NULL,
	REPRIMAND_DATE DATE NOT NULL,
	DESCRIPTION VARCHAR(240));
GO
--АТТЕСТАЦИЯ СЛУЖАЩЕГО
CREATE TABLE SERTIFICATION(
	ID INT PRIMARY KEY IDENTITY,
	EMPLOYEE_ID INT NOT NULL,
	SERTIFICATION_DATE DATE NOT NULL,
	DESCRIPTION VARCHAR(64));
GO
--СЛУЖБЫ
CREATE TABLE SERVICE(
	ID INT PRIMARY KEY IDENTITY, 
	SERVICE_TITLE VARCHAR(120) NOT NULL UNIQUE,
	GROUP_ID INT NOT NULL);	--принадлежность к определенной группе служб (определяется по первой цифре)
GO
--СПЕЦИАЛЬНОСТИ(ОБРАЗОВАНИЕ)
CREATE TABLE SPECIALITY(
	ID INT PRIMARY KEY IDENTITY,
	SPECIALITY VARCHAR(64) NOT NULL, 
	DESCRIPTION VARCHAR(120));
GO
--СЛУЖАЩИЙ
CREATE TABLE EMPLOYEE(
	ID INT PRIMARY KEY IDENTITY,
	EMPLOYEE_FIRSTNAME VARCHAR(64) NOT NULL,
	EMPLOYEE_MIDDLENAME	VARCHAR(64) NOT NULL,
	EMPLOYEE_LASTNAME VARCHAR(64) NOT NULL,
	PERSONAL_KEY VARCHAR(16) NOT NULL,
	POST_ID	INT NOT NULL,
	RANK_ID	INT NOT NULL,
	BORN_DATE DATE NOT NULL,
	JOB_START_DATE DATE NOT NULL,
	ADDRESS	VARCHAR(120),
	PASPORT_ID	INT NOT NULL,
	MOBILE_PHONE_NUMBER VARCHAR(20),
	HOME_PHONE_NUMBER VARCHAR(10),
	IS_PENSIONER BIT DEFAULT 0,
	PHOTO IMAGE);
GO
--НАРУШЕНИЯ
CREATE TABLE VIOLATION(
	ID INT PRIMARY KEY IDENTITY, 
	VIOLATOR_ID INT NOT NULL, 
	DESCRIPTION VARCHAR(240), 
	VIOLATION_DATE DATE NOT NULL);
GO
--ВОЕННЫЕ ЧАСТИ
CREATE TABLE MILITARY_UNIT(
	ID INT PRIMARY KEY IDENTITY,
	MILITARY_NAME VARCHAR(120),
	DESCRIPTION VARCHAR(240));
GO
--ПАСПОРТНЫЕ ДАННЫЕ
CREATE TABLE PASPORT(
	ID INT PRIMARY KEY IDENTITY,
	ORGANIZATION_UNIT VARCHAR(120),
	NUMBER VARCHAR(20),
	SERIES VARCHAR(5));
GO
--ЛОГ ОТКРЫТИЙ РАБОЧИХ СЕССИЙ
CREATE TABLE SESSION_LOG(
	ID INT PRIMARY KEY IDENTITY,
	USERID INT,
	SESSION_OPEN_TIME DATETIME)--ВРЕМЯ ОТКРЫТИЯ СЕССИИ
GO
--ЛОГ ПРОВОДИМЫХ ОПЕРАЦИЙ
CREATE TABLE OPERATIONS_LOG(
	ID INT PRIMARY KEY IDENTITY,
	OPERATION_TYPE VARCHAR(20),--ТИП ОПЕРАЦИИ
	TABLENAME VARCHAR(128),
	OPERATION_TIME DATETIME,
	DESCRIPTION VARCHAR(120))--ВРЕМЯ ПРОВЕДЕНИЯ ОПЕРАЦИИ
GO
-------------------------------------------------------------------------
---CONSTRAINTS
-------------------------------------------------------------------------
ALTER TABLE SESSION_LOG
	ADD
		CONSTRAINT	FK_SESSION_LOG_USERS
					FOREIGN KEY (USERID) REFERENCES USERS ON DELETE CASCADE
GO
ALTER TABLE PASPORT
	ADD
		CONSTRAINT	UQ_PASPORT_UNIQUE
					UNIQUE (NUMBER, SERIES);
GO
ALTER TABLE CLASINESS
	ADD 
		CONSTRAINT	FK_CLASINESS_EMPLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE;
GO
ALTER TABLE CONTRACT
	ADD 
		CONSTRAINT	FK_CONTRACT_EMPLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE;
GO
ALTER TABLE EDUCATION_TIME
	ADD 
		CONSTRAINT	FK_EDUCATION_TIME_EMPLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE,
		CONSTRAINT	FK_EDUCATION_TIME_EDUCATIONAL_INSTITUTION
					FOREIGN KEY (INSTITUTION_ID) REFERENCES EDUCATIONAL_INSTITUTION ON DELETE CASCADE,
		CONSTRAINT	FK_EDUCATION_TIME_SPECIALITY
					FOREIGN KEY (SPECIALITY_ID) REFERENCES SPECIALITY ON DELETE CASCADE;
GO
ALTER TABLE EMPLOYEE
	ADD
		CONSTRAINT	FK_EMPLOYEE_POST
					FOREIGN KEY	(POST_ID) REFERENCES POST ON DELETE CASCADE,
		CONSTRAINT	FK_EMPLOYEE_RANK
					FOREIGN KEY	(RANK_ID) REFERENCES RANK ON DELETE CASCADE,
		CONSTRAINT	FK_EMPLOYEE_PASPORT
					FOREIGN KEY (PASPORT_ID) REFERENCES PASPORT ON DELETE CASCADE;
GO
ALTER TABLE GRATITUDE
	ADD
		CONSTRAINT	FK_GRATITUDE_EMPLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE;
GO
ALTER TABLE HOLIDAY_TIME
	ADD
		CONSTRAINT	FK_HOLIDAY_TIME_EMPLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE;
GO
ALTER TABLE HOSPITAL_TIME
	ADD
		CONSTRAINT	FK_HOSPITAL_TIME_EMPLOYEE
					FOREIGN KEY (DISEASED_ID) REFERENCES EMPLOYEE ON DELETE CASCADE;
GO
ALTER TABLE MILITARY_PROCESS
	ADD
		CONSTRAINT	FK_MILITARY_PROCESS_EMPLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE,
		CONSTRAINT	FK_MILITARY_PROCESS_MILITARY_UNIT
					FOREIGN KEY (MILITARY_UNIT_ID) REFERENCES MILITARY_UNIT ON DELETE CASCADE;
GO
ALTER TABLE POST
	ADD
		CONSTRAINT	FK_POST_SERVICE
					FOREIGN KEY (SERVICE_ID) REFERENCES SERVICE ON DELETE CASCADE,
		CONSTRAINT	UQ_UNIQUE_CONSTRAINT
					UNIQUE(POST_TITLE,SERVICE_ID);
GO
ALTER TABLE POST_ASSIGNMENT
	ADD
		CONSTRAINT	FK_POST_ASSIGNMENT_TB_EMLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE,
		CONSTRAINT	FK_POST_ASSIGNMENT_POST_PREV
					FOREIGN KEY (PREV_POST_ID) REFERENCES POST,
		CONSTRAINT	FK_POST_ASSIGNMENT_POST_NEW
					FOREIGN KEY (NEW_POST_ID) REFERENCES POST;
GO
ALTER TABLE RANK_ASSIGNMENT
	ADD
		CONSTRAINT	FK_RANK_ASSIGNMENT_TB_EMLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE,
		CONSTRAINT	FK_RANK_ASSIGNMENT_RANK_PREV
					FOREIGN KEY (PREV_RANK_ID) REFERENCES RANK,
		CONSTRAINT	FK_RANK_ASSIGNMENT_RANK_NEW
					FOREIGN KEY (NEW_RANK_ID) REFERENCES RANK;
GO
ALTER TABLE RELATIVE
	ADD
		CONSTRAINT	FK_RELATIVE_EMPLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE;
GO
ALTER TABLE REPRIMAND
	ADD
		CONSTRAINT	FK_REPRIMAND_EMPLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE;
GO
ALTER TABLE SERTIFICATION
	ADD
		CONSTRAINT	FK_SERTIFICATION_EMPLOYEE
					FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE ON DELETE CASCADE;
GO
ALTER TABLE VIOLATION
	ADD
		CONSTRAINT	FK_VIOLATION_EMPLOYEE
					FOREIGN KEY (VIOLATOR_ID) REFERENCES EMPLOYEE ON DELETE CASCADE;
GO
INSERT INTO USERS VALUES('ADMIN', 'admin', 1, 'Шевчук', 'Дмитрий', 'Павлович'),
						('READER', 'reader', 0, 'Шевчук', 'Дмитрий', 'Павлович');

GO

INSERT INTO SERVICE
	VALUES('Аппарат отряда', 100),
		('Группа кадров и делопроизводства', 200),
		('Центр оперативного управления', 300),
		('Медицинская служба', 400),
		('Водолазно-спасательная служба', 500),
		('Взрывотехническая служба', 600),
		('Служба химической и радиационной защиты', 700),
		('Пожарно-спасательная служба', 800),
		('Отделение инженерных работ', 801),
		('Кинологическое отделение', 802),
		('Отделение связи и оповещения', 803),
		('Пожарно-спасательное отделение', 804);

GO

INSERT INTO POST
	VALUES('Нач. отряда', 1, 1),	--Аппарат отряда
		('Зам. по ОТР', 1, 2),
		('Зам. по МТО', 1, 2),
		('Зам. по ИРКО', 1, 2),
		('Нач. деж. смены', 1, 3),
		('Старший инженер', 1, 4),
		('Инспектор гр. ИРКО', 2, 1),	--Группа кадров и делопроизводства
		('Инспектор гр. делопроизводства', 2, 2),
		('Нач. деж. смены', 3, 1),	--Центр оперативного управления
		('Старший инженер', 3, 2),
		('Диспетчер', 3, 3),
		('Начальник', 4, 1),	--Медицинская служба
		('Врач скорой мед. помощи', 4, 2),
		('Спасатель-фельдшер', 4, 3),
		('Водитель-санитар', 4, 4),
		('Начальник', 5, 1),	--Водолазно-спасательная служба
		('Командир отделения', 5, 2),
		('Спасатель-водолаз', 5, 3),
		('Водитель-водолаз', 5, 4),
		('Начальник', 6, 1),	--Взрывотехническая служба
		('Инженер-взрывотехник', 6, 2),
		('Командир отделения', 6, 3),
		('Старший спасатель-взрывотехник', 6, 4),
		('Водитель-взрывотехник', 6, 5),
		('Начальник', 7, 1),	--Служба хим. и радиационной защиты
		('Инженер', 7, 2),
		('Командир отделения', 7, 3),
		('Старший спасатель-химик-дозиметр.', 7, 4),
		('Начальник', 8, 1),	--Пожарно-спасательная служба
		('Водитель-спасатель', 9, 1)	, --Отделение инженерных работ
		('Старший инструктор-кинолог', 10, 1),	--Кинологическое отделение
		('Спасатель-кинолог', 10, 2),
		('Инженер', 11, 1),	--Отделение связи и оповещения
		('Мастер связи', 11, 2),
		('Водитель-связист', 11, 3),
		('Командир отделения', 12, 1),	--Пожарно-спасательное отделение
		('Старший спасатель-пожарный', 12, 2),
		('Спасатель-пожарный', 12, 3),
		('Старший водитель-спасатель', 12, 4),
		('Водитель-спасатель', 12, 5)
GO

INSERT INTO RANK
	VALUES('Младший сержант', 1, 1),
		  ('Сержант', 2, 2),
		  ('Старший сержант', 3, 3),
		  ('Старшина', 4, 3),
		  ('Прапорщик', 5, 5),
		  ('Младший лейтенант',6, 1),
		  ('Лейтенант', 7, 2),
		  ('Старший лейтенант', 8, 3),
		  ('Капитан', 9, 3),
		  ('Майор', 10, 4),
		  ('Подполковник', 11, 5);
GO
-------------------------------------------------------------------------
---PROCEDURES
-------------------------------------------------------------------------
--ВОЗВРАЩАЕТ ВСЕХ ПОЛЬЗОВАТЕЛЕЙ ИЛИ ПОЛЬЗОВАТЕЛЯ ПО ID
CREATE PROCEDURE GET_USER 
				@USER_ID INT = NULL
AS
IF @USER_ID IS NULL
	SELECT * FROM USERS;
ELSE
	SELECT * FROM USERS WHERE ID = @USER_ID;
GO

--ВОЗВРАЩАЕТ ДОЛЖНОСТЬ ПО ID ИЛИ ВСЕ
CREATE PROCEDURE GET_POST 
				@POST_ID INT = NULL
AS
IF @POST_ID IS NULL
	SELECT * FROM POST;
ELSE 
	SELECT * FROM POST WHERE ID = @POST_ID;

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ КЛАССНОСТИ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_CLASINESS
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM CLASINESS;
ELSE 
	SELECT * FROM CLASINESS WHERE EMPLOYEE_ID = @EMPLOYEE_ID; 

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ КОНТРАКТАМ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_CONTRACT
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM CONTRACT;
ELSE 
	SELECT * FROM CONTRACT WHERE EMPLOYEE_ID = @EMPLOYEE_ID;  

GO

--ВОЗВРАЩАЕТ ВСЕ УЧРЕЖДЕНИЯ ОБРАЗОВАНИЯ ИЛИ КОНКРЕТНОЕ ЗАВЕДЕНИЕ
CREATE PROCEDURE GET_EDUCATIONAL_INSTITUTION
				@INSTITUTION_ID INT = NULL
AS
IF @INSTITUTION_ID IS NULL
	SELECT * FROM EDUCATIONAL_INSTITUTION;
ELSE 
	SELECT * FROM EDUCATIONAL_INSTITUTION WHERE ID = @INSTITUTION_ID;

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ ОБУЧЕНИЯ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_EDUCATION_TIME
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM EDUCATION_TIME;
ELSE 
	SELECT * FROM EDUCATION_TIME WHERE EMPLOYEE_ID = @EMPLOYEE_ID;  

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ БЛАГОДАРНОСТЕЙ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_GRATITUDE
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM GRATITUDE;
ELSE 
	SELECT * FROM GRATITUDE WHERE EMPLOYEE_ID = @EMPLOYEE_ID;  

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ ОТПУСКОВ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_HOLIDAY_TIME
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM HOLIDAY_TIME;
ELSE 
	SELECT * FROM HOLIDAY_TIME WHERE EMPLOYEE_ID = @EMPLOYEE_ID;  

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ БОЛЬНИЧНЫХ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_HOSPITAL_TIME
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM HOSPITAL_TIME;
ELSE 
	SELECT * FROM HOSPITAL_TIME WHERE DISEASED_ID = @EMPLOYEE_ID; 

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ ПРОХОЖДЕНИЯ СЛУЖБЫ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_MILITARY_PROCESS
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM MILITARY_PROCESS;
ELSE 
	SELECT * FROM MILITARY_PROCESS WHERE EMPLOYEE_ID = @EMPLOYEE_ID; 

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ ПРИСВОЕНИЯ ДОЛЖНОСТЕЙ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_POST_ASSIGNMENT
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM POST_ASSIGNMENT;
ELSE 
	SELECT * FROM POST_ASSIGNMENT WHERE EMPLOYEE_ID = @EMPLOYEE_ID; 

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ ПРИСВОЕНИЯ ЗВАНИЙ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_RANK_ASSIGNMENT
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM RANK_ASSIGNMENT;
ELSE 
	SELECT * FROM RANK_ASSIGNMENT WHERE EMPLOYEE_ID = @EMPLOYEE_ID; 

GO

--ВОЗВРАЩАЕТ ВСЕХ РОДСТВЕННИКОВ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_RELATIVE
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM RELATIVE;
ELSE 
	SELECT * FROM RELATIVE WHERE EMPLOYEE_ID = @EMPLOYEE_ID; 

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ ВЫГОВОРОВ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_REPRIMAND
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM REPRIMAND;
ELSE 
	SELECT * FROM REPRIMAND WHERE EMPLOYEE_ID = @EMPLOYEE_ID; 

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ АТТЕСТАЦИЙ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_SERTIFICATION
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM SERTIFICATION;
ELSE 
	SELECT * FROM SERTIFICATION WHERE EMPLOYEE_ID = @EMPLOYEE_ID; 

GO

--ВОЗВРАЩАЕТ ВСЕ СЛУЖБЫ ИЛИ ПО ID
CREATE PROCEDURE GET_SERVICE
				@SERVICE_ID INT = NULL
AS
IF @SERVICE_ID IS NULL
	SELECT * FROM SERVICE;
ELSE 
	SELECT * FROM SERVICE WHERE ID = @SERVICE_ID;

GO

--ВОЗВРАЩАЕТ ВСЕ СПЕЦИАЛЬНОСТИ ИЛИ ПО ID
CREATE PROCEDURE GET_SPECIALITY
				@SPECIALITY_ID INT = NULL
AS
IF @SPECIALITY_ID IS NULL
	SELECT * FROM SPECIALITY;
ELSE 
	SELECT * FROM SPECIALITY WHERE ID = @SPECIALITY_ID;

GO

--ВОЗВРАЩАЕТ ВСЕ ЗАПИСИ НАРУШЕНИЙ ИЛИ ПО КОНКРЕТНОМУ СОТРУДНИКУ
CREATE PROCEDURE GET_VIOLATION
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM VIOLATION;
ELSE 
	SELECT * FROM VIOLATION WHERE VIOLATOR_ID = @EMPLOYEE_ID;

GO

--ВОЗВРАЩАЕТ ВСЕХ СЛУЖАЩИХ ИЛИ ПО ID
CREATE PROCEDURE GET_EMPLOYEE
				@EMPLOYEE_ID INT = NULL
AS
IF @EMPLOYEE_ID IS NULL
	SELECT * FROM EMPLOYEE;
ELSE
	SELECT * FROM EMPLOYEE WHERE ID = @EMPLOYEE_ID

GO

--ВОЗВРАЩАЕТ ВСЕ ВОЕННЫЕ ЧАСТИ ИЛИ ПО ID
CREATE PROCEDURE GET_MILITARY_UNIT
				@MILITARY_UNIT_ID INT = NULL
AS
IF @MILITARY_UNIT_ID IS NULL
	SELECT * FROM MILITARY_UNIT;
ELSE 
	SELECT * FROM MILITARY_UNIT WHERE ID = @MILITARY_UNIT_ID;

GO
--ВОЗВРАЩАЕТ ПОЛЬЗОВАТЕЛЯ, ЕСЛИ АВТОРИЗАЦИЯ ПРОШЛА УСПЕШНО
--@LOGIN - ЛОГИН
--@PASSWORD - ПАРОЛЬ
CREATE PROCEDURE CHECK_USER 
	@LOGIN VARCHAR(20), 
	@PASSWORD VARCHAR(20)
AS
	SELECT * FROM USERS WHERE USER_LOGIN = @LOGIN AND USER_PASSWORD = @PASSWORD;
GO
--ДОБАВЛЯЕТ СЛУЖАЩЕГО В БД И ВОЗВРАЩАЕТ ЕГО ID
--@FIRSTNAME - ИМЯ; 
--@MIDDLENAME - ОТЧЕСТВО; 
--@LASTNAME - ФАМИЛИЯ
--@PERSONAL_KEY - ЛИЧНЫЙ НОМЕР; 
--@POST_ID - ID ДОЛЖНОСТИ
--@RANK_ID - ID ЗВАНИЯ; 
--@BORN_DATE - ДАТА РОЖДЕНИЯ
--@JOB_START_DATE - ДАТА НАЧАЛА РАБОТЫ; 
--@ADDRESS - АДРЕС
--@PASPORT_ID - ID ПАСПОРТА; @
--MOBILE_PHONE_NUMBER - МОБИЛЬНЫЙ НОМЕР
--@HOME_PHONE_NUMBER - ДОМАШНИЙ НОМЕР; 
--@IS_PENSIONER - ЯВЛЯЕТСЯ ЛИ ПЕНСИОНЕРОМ
--@PHOTO - ФОТО
CREATE PROCEDURE ADD_EMPLOYEE 
				@FIRSTNAME VARCHAR(64), 
				@MIDDLENAME VARCHAR(64), 
				@LASTNAME VARCHAR(64), 
				@PERSONAL_KEY VARCHAR(16),
				@POST_ID INT, 
				@RANK_ID INT, 
				@BORN_DATE DATE, 
				@JOB_START_DATE DATE, 
				@ADDRESS VARCHAR(120),
				@PASPORT_ID INT, 
				@MOBILE_PHONE_NUMBER VARCHAR(13), 
				@HOME_PHONE_NUMBER VARCHAR(10), 
				@IS_PENSIONER BIT, 
				@PHOTO IMAGE
AS
INSERT INTO EMPLOYEE VALUES(@FIRSTNAME, 
							@MIDDLENAME, 
							@LASTNAME, 
							@PERSONAL_KEY,
							@POST_ID, 
							@RANK_ID, 
							@BORN_DATE, 
							@JOB_START_DATE, 
							@ADDRESS,
							@PASPORT_ID, 
							@MOBILE_PHONE_NUMBER, 
							@HOME_PHONE_NUMBER, 
							@IS_PENSIONER, 
							@PHOTO);
SELECT MAX(ID) FROM EMPLOYEE;
GO
--ДОБАВЛЯЕТ КЛАССНОСТЬ И ВОЗВРАЩАЕТ ЕГО ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@ORDER_NUMBER - НОМЕР ПРИКАЗА
--@CLASINESS_DATE - ДАТА ПОДТВЕРЖДЕНИЯ КЛАССНОСТИ
--@CLASINESS_LEVEL - УРОВЕНЬ КЛАССНОСТИ
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
CREATE PROCEDURE ADD_CLASINESS 
				@EMPLOYEE_ID INT,
				@ORDER_NUMBER INT,
				@CLASINESS_DATE DATE,
				@CLASINESS_LEVEL INT,
				@DESCRIPTION VARCHAR(64)
AS
INSERT INTO CLASINESS VALUES(@EMPLOYEE_ID, 
							 @ORDER_NUMBER, 
							 @CLASINESS_DATE, 
							 @CLASINESS_LEVEL, 
							 @DESCRIPTION);
SELECT MAX(ID) FROM CLASINESS;
GO
--ДОБАВЛЯЕТ КОНТРАКТ И ВОЗВРАЩАЕТ ЕГО ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@START_DATE - ДАТА ПОДПИСАНИЯ КОНТРАКТА
--@FINISH_DATE - ДАТА ОКОНЧАНИЯ КОНТРАКТА
--@DESCRIPTION - ДОПОЛНИТЕЛЬНО
CREATE PROCEDURE ADD_CONTRACT
				@EMPLOYEE_ID INT,
				@START_DATE DATE,
				@FINISH_DATE DATE,
				@DESCRIPTION VARCHAR(64)
AS
INSERT INTO CONTRACT VALUES(@EMPLOYEE_ID, 
							@START_DATE, 
							@FINISH_DATE, 
							@DESCRIPTION);
SELECT MAX(ID) FROM CONTRACT;
GO
--ДОБАВЛЯЕТ ПРОЦЕСС ОБУЧЕНИЯ И ВОЗВРАЩАЕТ ЕГО ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@START_DATE - ДАТА НАЧАЛА ОБУЧЕНИЯ
--@FINISH_DATE - ДАТА ОКОНЧАНИЯ ОБУЧЕНИЯ
--@SPECIALITY_ID - ID СПЕЦИАЛЬНОСТИ
--@INSTITUTION_ID - ID УЧЕБНОГО ЗАВЕДЕНИЯ
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
CREATE PROCEDURE ADD_EDUCATION_TIME
				@EMPLOYEE_ID INT,
				@START_DATE DATE,
				@FINISH_DATE DATE,
				@SPECIALITY_ID INT,
				@INSTITUTION_ID INT,
				@DESCRIPTION VARCHAR(64)
AS
INSERT INTO EDUCATION_TIME VALUES(@EMPLOYEE_ID,
								  @START_DATE,
								  @FINISH_DATE,
								  @SPECIALITY_ID,
								  @INSTITUTION_ID,
								  @DESCRIPTION);
SELECT MAX(ID) FROM EDUCATION_TIME;
GO
--ДОБАВЛЯЕТ УЧЕБНОЕ ЗАВЕДЕНИЕ И ВОЗВРАЩАЕТ ЕГО ID
--@INST_TITLE - НАЗВАНИЕ
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
--@INST_TYPE - ТИП УЧЕБНОГО ЗАВЕДЕНИЯ
CREATE PROCEDURE ADD_EDUCATIONAL_INSTITUTION
				@INST_TITLE VARCHAR(64),
				@DESCRIPTION VARCHAR(64),
				@INST_TYPE VARCHAR(64)
AS
INSERT INTO EDUCATIONAL_INSTITUTION VALUES(@INST_TITLE,
										   @DESCRIPTION,
										   @INST_TYPE);
SELECT MAX(ID) FROM EDUCATIONAL_INSTITUTION;
GO
--ДОБАВЛЯЕТ БЛАГОДАРНОСТЬ И ВОЗВРАЩАЕТ ЕЕ ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
--@GRATITUDE_DATE - ДАТА ВЫНЕСЕНИЯ БЛАГОДАРНОСТИ
CREATE PROCEDURE ADD_GRATITUDE
				@EMPLOYEE_ID INT,
				@DESCRIPTION VARCHAR(64),
				@GRATITUDE_DATE DATE
AS
INSERT INTO GRATITUDE VALUES(@EMPLOYEE_ID,
							 @DESCRIPTION,
							 @GRATITUDE_DATE);
SELECT MAX(ID) FROM GRATITUDE;
GO
--ДОБАВЛЯЕТ ОТПУСК И ВОЗВРАЩАЕТ ЕГО ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
--@START_HOLIDAY_DATE - ДАТА НАЧАЛА ОТПУСКА
--@FINISH_HOLIDAY_DATE - ДАТА ОКОНЧАНИЯ ОТПУСКА
CREATE PROCEDURE ADD_HOLIDAY_TIME
				@EMPLOYEE_ID INT,
				@DESCRIPTION VARCHAR(64),
				@START_HOLIDAY_DATE DATE,
				@FINISH_HOLIDAY_DATE DATE
AS
INSERT INTO HOLIDAY_TIME VALUES(@EMPLOYEE_ID,
								@DESCRIPTION,
								@START_HOLIDAY_DATE,
								@FINISH_HOLIDAY_DATE);
SELECT MAX(ID) FROM HOLIDAY_TIME;
GO
--ДОБАВЛЯЕТ БОЛЬНИЧНЫЙ И ВОЗВРАЩАЕТ ЕГО ID
--@DISEASED_ID - ID СЛУЖАЩЕГО
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
--@START_HOSPITAL_TIME - ДАТА ОТКРЫТИЯ БОЛЬНИЧНОГО
--@FINISH_HOSPITAL_TIME - ДАТА ЗАКРЫТИЯ БОЛЬНИЧНОГО
CREATE PROCEDURE ADD_HOSPITAL_TIME
				@DISEASED_ID INT,
				@DESCRIPTION VARCHAR(64),
				@START_HOSPITAL_TIME DATE,
				@FINISH_HOSPITAL_TIME DATE
AS
INSERT INTO HOSPITAL_TIME VALUES(@DISEASED_ID,
								 @DESCRIPTION,
								 @START_HOSPITAL_TIME,
								 @FINISH_HOSPITAL_TIME);
SELECT MAX(ID) FROM HOSPITAL_TIME;
GO
--ДОБАВЛЯЕТ ПРОХОЖДЕНИЕ СЛУЖБЫ И ВОЗВРАЩАЕТ ЕГО ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@DESCRIPTION - ДОП. ИНФОРМЦАЦИЯ
--@START_DATE - ДАТА НАЧАЛА НЕСЕНИЯ СЛУЖБЫ
--@FINISH_DATE - ДАТА ОКОНЧАНИЯ СЛУЖБЫ
--@MILITARY_UNIT_ID - ID ВОИНСКОЙ ЧАСТИ
CREATE PROCEDURE ADD_MILITARY_PROCESS
				@EMPLOYEE_ID INT,
				@DESCRIPTION VARCHAR(64),
				@START_DATE DATE,
				@FINISH_DATE DATE,
				@MILITARY_UNIT_ID INT
AS
INSERT INTO MILITARY_PROCESS VALUES(@EMPLOYEE_ID,
								    @DESCRIPTION,
								    @START_DATE,
								    @FINISH_DATE,
								    @MILITARY_UNIT_ID);
SELECT MAX(ID) FROM MILITARY_PROCESS;
GO
--ДОБАВЛЯЕТ ВОИНСКУЮ ЧАСТЬ И ВОЗВРАЩАЕТ ЕЕ ID
--@MILITARY_NAME - НАЗВАНИЕ/НОМЕР ЧАСТИ
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
CREATE PROCEDURE ADD_MILITARY_UNIT
				@MILITARY_NAME VARCHAR(120),
				@DESCRIPTION VARCHAR(240)
AS
INSERT INTO MILITARY_UNIT VALUES(@MILITARY_NAME,
								 @DESCRIPTION);
SELECT MAX(ID) FROM MILITARY_UNIT;
GO
--ДОБАВЛЯЕТ ПАСПОРТ И ВОЗВРАЩАЕТ ЕГО ID
--@ORGANIZATION_UNIT - ОРГАНИЗАЦИЯ, ВЫДАВАВШАЯ ПАСПОРТ
--@NUMBER - НОМЕР ПАСПОРТА
--@SERIES - СЕРИЯ ПАСПОРТА
CREATE PROCEDURE ADD_PASPORT
				@ORGANIZATION_UNIT VARCHAR(120),
				@NUMBER VARCHAR(20),
				@SERIES VARCHAR(5)
AS
INSERT INTO PASPORT VALUES(@ORGANIZATION_UNIT,
						   @NUMBER,
						   @SERIES);
GO
--ДОБАВЛЯЕТ ПРИСВОЕНИЕ ДОЛЖНОСТИ И ВОЗВРАЩАЕТ ЕГО ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
--@ASSIGNMENT_DATE - ДАТА ПРИСВОЕНИЯ
--@PREV_POST_ID - ID ПРЕДЫДУЩЕЙ ДОЛЖНОСТИ
--@NEW_POST_ID - ID НОВОЙ ДОЛЖНОСТИ
--@ORDER_NUMBER - НОМЕР ПРИКАЗА
CREATE PROCEDURE ADD_POST_ASSIGNMENT
				@EMPLOYEE_ID INT,
				@DESCRIPTION VARCHAR(240),
				@ASSIGNMENT_DATE DATE,
				@PREV_POST_ID INT,
				@NEW_POST_ID INT,
				@ORDER_NUMBER INT
AS
INSERT INTO POST_ASSIGNMENT VALUES(@EMPLOYEE_ID,
								   @DESCRIPTION,
								   @ASSIGNMENT_DATE,
								   @PREV_POST_ID,
								   @NEW_POST_ID,
								   @ORDER_NUMBER);
SELECT MAX(ID) FROM POST_ASSIGNMENT;
GO
--ДОБАВЛЯЕТ ПРИСВОЕНИЕ ЗВАНИЯ И ВОЗВРАЩАЕТ ЕГО ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
--@ASSIGNMENT_DATE - ДАТА ПРИСВОЕНИЯ
--@PREV_RANK_ID - ID ПРЕДЫДУЩЕЙ ДОЛЖНОСТИ
--@NEW_RANK_ID - ID НОВОЙ ДОЛЖНОСТИ
--@ORDER_NUMBER - НОМЕР ПРИКАЗА
CREATE PROCEDURE ADD_RANK_ASSIGNMENT
				@EMPLOYEE_ID INT,
				@DESCRIPTION VARCHAR(240),
				@ASSIGNMENT_DATE DATE,
				@PREV_RANK_ID INT,
				@NEW_RANK_ID INT,
				@ORDER_NUMBER INT
AS
INSERT INTO RANK_ASSIGNMENT VALUES(@EMPLOYEE_ID,
								   @DESCRIPTION,
								   @ASSIGNMENT_DATE,
								   @PREV_RANK_ID,
								   @NEW_RANK_ID,
								   @ORDER_NUMBER);
SELECT MAX(ID) FROM RANK_ASSIGNMENT;
GO
--ДОБАВЛЯЕТ РОДСТВЕННИКА И ВОЗВРАЩАЕТ ЕГО ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@RELATION_TYPE_ID - ID ТИПА РОДСТВА
--@FIRST_NAME - ИМЯ
--@MIDDLE_NAME - ОТЧЕСТВО
--@LAST_NAME - ФАМИЛИЯ
--@BORN_DATE - ДАТА РОЖДЕНИЯ
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
CREATE PROCEDURE ADD_RELATIVE
				@EMPLOYEE_ID INT,
				@RELATION_TYPE VARCHAR(30),
				@FIRST_NAME VARCHAR(64),
				@MIDDLE_NAME VARCHAR(64),
				@LAST_NAME VARCHAR(64),
				@BORN_DATE DATE,
				@DESCRIPTION VARCHAR(240)
AS
INSERT INTO RELATIVE VALUES(@EMPLOYEE_ID,
							@RELATION_TYPE,
							@FIRST_NAME,
							@MIDDLE_NAME,
							@LAST_NAME,
							@BORN_DATE,
							@DESCRIPTION);
SELECT MAX(ID) FROM RELATIVE;
GO
--ДОБАВЛЯЕТ ВЫГОВОР И ВОЗВРАЩАЕТ ЕГО ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@SUM_OF_REPRIMAND - СУММА ВЫГОВОРА
--@REPRIMAND_DATE - ДАТА ВЫНЕСЕНИЯ ВЫГОВОРА
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
CREATE PROCEDURE ADD_REPRIMAND
				@EMPLOYEE_ID INT,
				@SUM_OF_REPRIMAND FLOAT,
				@REPRIMAND_DATE DATE,
				@DESCRIPTION VARCHAR(240)
AS
INSERT INTO REPRIMAND VALUES(@EMPLOYEE_ID,
							 @SUM_OF_REPRIMAND,
							 @REPRIMAND_DATE,
							 @DESCRIPTION);
SELECT MAX(ID) FROM REPRIMAND;
GO
--ДОБАВЛЯЕТ АТТЕСТАЦИЮ И ВОЗВРАЩАЕТ ЕЁ ID
--@EMPLOYEE_ID - ID СЛУЖАЩЕГО
--@SERTIFICATION_DATE - ДАТА ВЫНЕСЕНИЯ ВЫГОВОРА
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
CREATE PROCEDURE ADD_SERTIFICATION
				@EMPLOYEE_ID INT,
				@SERTIFICATION_DATE DATE,
				@DESCRIPTION VARCHAR(240)
AS
INSERT INTO SERTIFICATION VALUES(@EMPLOYEE_ID,
								 @SERTIFICATION_DATE,
								 @DESCRIPTION);
SELECT MAX(ID) FROM SERTIFICATION;
GO
--ДОБАВЛЯЕТ ВЫГОВОР И ВОЗВРАЩАЕТ ЕГО ID
--@VIOLATOR_ID - ID СЛУЖАЩЕГО
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
--@VIOLATION_DATE - ДАТА НАРУШЕНИЯ
CREATE PROCEDURE ADD_VIOLATION
				@VIOLATOR_ID INT,
				@DESCRIPTION VARCHAR(240),
				@VIOLATION_DATE DATE
AS
INSERT INTO VIOLATION VALUES(@VIOLATOR_ID,
							 @DESCRIPTION,
							 @VIOLATION_DATE);
SELECT MAX(ID) FROM VIOLATION;
GO
--ДОБАВЛЯЕТ СПЕЦИАЛЬНОСТЬ И ВОЗВРАЩАЕТ ЕЕ ID
--@SPECIALITY - НАЗВАНИЕ СПЕЦИАЛЬНОСТИ
--@DESCRIPTION - ДОП. ИНФОРМАЦИЯ
CREATE PROCEDURE ADD_SPECIALITY
				@SPECIALITY VARCHAR(64),
				@DESCRIPTION VARCHAR(120)
AS
INSERT INTO SPECIALITY VALUES(@SPECIALITY,
							  @DESCRIPTION);
SELECT MAX(ID) FROM SPECIALITY;
GO
--ДОБАВЛЯЕТ ПОЛЬЗОВАТЕЛЯ И ВОЗВРАЩАЕТ ЕГО ID
--@USER_LOGIN - ЛОГИН
--@USER_PASSWORD - ПАРОЛЬ
--@ACCESS_LEVEL - УРОВЕНЬ ДОСТУПА
--@LAST_NAME - ФАМИЛИЯ
--@FIRST_NAME - ИМЯ
--@MIDDLE_NAME - ОТЧЕСТВО
CREATE PROCEDURE ADD_USERS
				@USER_LOGIN VARCHAR(20),
				@USER_PASSWORD VARCHAR(20),
				@ACCESS_LEVEL INT,
				@LAST_NAME VARCHAR(50),
				@FIRST_NAME VARCHAR(50),
				@MIDDLE_NAME VARCHAR(50)
AS
INSERT INTO USERS VALUES(@USER_LOGIN,
						 @USER_PASSWORD,
						 @ACCESS_LEVEL,
						 @LAST_NAME,
						 @FIRST_NAME,
						 @MIDDLE_NAME);
SELECT MAX(ID) FROM USERS;

GO
--ВОЗВРАЩАЕТ АКТУАЛЬНУЮ КЛАССНОСТЬ ДЛЯ СОТРУДНИКА
CREATE PROCEDURE GET_CURRENT_CLASINESS
				@EMPLOYEE_ID INT
AS
SELECT * FROM CLASINESS WHERE EMPLOYEE_ID = @EMPLOYEE_ID AND 
							CLASINESS_DATE = (SELECT MAX(CLASINESS_DATE)
											  FROM CLASINESS C
											  WHERE C.EMPLOYEE_ID = @EMPLOYEE_ID);

GO
-------------------------------------------------------------------------
---TRIGGERS
-------------------------------------------------------------------------
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ КЛАССНОСТИ
CREATE TRIGGER CLASINESS_INSERT_UPDATE ON CLASINESS
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'CLASINESS', GETDATE(), 'ОБНОВЛЕНА КЛАССНОСТЬ ЗА ' + CAST(CLASINESS_DATE AS VARCHAR(20)) FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'CLASINESS', GETDATE(), 'ДОБАВЛЕНА КЛАССНОСТЬ ЗА ' + CAST(CLASINESS_DATE AS VARCHAR(20)) FROM INSERTED
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ КЛАССНОСТИ
CREATE TRIGGER CLASINESS_DELETE ON CLASINESS
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'CLASINESS', GETDATE(), 'УДАЛЕНА КЛАССНОСТЬ ЗА ' + CAST(CLASINESS_DATE AS VARCHAR(20)) FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ КОНТРАКТА
CREATE TRIGGER CONTRACT_INSERT_UPDATE ON CONTRACT
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'CONTRACTS', GETDATE(), 
				   'ОБНОВЛЕН КОНТРАКТ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'CONTRACTS', GETDATE(), 
				   'ДОБАВЛЕН КОНТРАКТ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ КОНТРАКТА
CREATE TRIGGER CONTRACT_DELETE ON CONTRACT
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'CONTRACTS', GETDATE(), 
				   'УДАЛЕН КОНТРАКТ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_DATE AS VARCHAR(20)) 
			FROM DELETED
GO

--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ УЧЕБНОГО ЗАВЕДЕНИЯ
CREATE TRIGGER EDUCATIONAL_INSTITUTION_INSERT_UPDATE ON EDUCATIONAL_INSTITUTION
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'EDUCATIONAL_INSTITUTION', GETDATE(), 
				   'ОБНОВЛЕНО УЧЕБНОЕ ЗАВЕДЕНИЕ "' + (SELECT INST_TITLE FROM EDUCATIONAL_INSTITUTION E WHERE E.ID = DELETED.ID) + '"'
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'EDUCATIONAL_INSTITUTION', GETDATE(), 
				   'ДОБАВЛЕНО УЧЕБНОЕ ЗАВЕДЕНИЕ "' + (SELECT INST_TITLE FROM EDUCATIONAL_INSTITUTION E WHERE E.ID = INSERTED.ID) + '"'
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ УЧЕБНОГО ЗАВЕДЕНИЯ
CREATE TRIGGER EDUCATIONAL_INSTITUTION_DELETE ON EDUCATIONAL_INSTITUTION
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'EDUCATIONAL_INSTITUTION', GETDATE(), 
				   'УДАЛЕНО УЧЕБНОЕ ЗАВЕДЕНИЕ "' + INST_TITLE + '"'
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ ОБУЧЕНИЯ
CREATE TRIGGER EDUCATION_TIME_INSERT_UPDATE ON EDUCATION_TIME
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'EDUCATION_TIME', GETDATE(), 
				   'ОБНОВЛЕНА ЗАПИСЬ ОБ ОБУЧЕНИИ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'EDUCATION_TIME', GETDATE(), 
				   'ДОБАВЛЕНА ЗАПИСЬ ОБ ОБУЧЕНИИ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ ЗАПИСИ ОБ ОБУЧЕНИИ
CREATE TRIGGER EDUCATION_TIME_DELETE ON EDUCATION_TIME
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'EDUCATION_TIME', GETDATE(), 
				   'УДАЛЕНА ЗАПИСЬ ОБ ОБУЧЕНИИ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_DATE AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ БЛАГОДАРНОСТИ
CREATE TRIGGER GRATITUDE_INSERT_UPDATE ON GRATITUDE
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'GRATITUDE', GETDATE(), 
				   'ОБНОВЛЕНА БЛАГОДАРНОСТЬ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(GRATITUDE_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'GRATITUDE', GETDATE(), 
				   'ДОБАВЛЕНА БЛАГОДАРНОСТЬ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.EMPLOYEE_ID) + '" ЗА ' + CAST(GRATITUDE_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ БЛАГОДАРНОСТИ
CREATE TRIGGER GRATITUDE_TIME_DELETE ON GRATITUDE
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'GRATITUDE', GETDATE(), 
				   'УДАЛЕНА БЛАГОДАРНОСТЬ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(GRATITUDE_DATE AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ ОТПУСКА
CREATE TRIGGER HOLIDAY_TIME_INSERT_UPDATE ON HOLIDAY_TIME
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'HOLIDAY_TIME', GETDATE(), 
				   'ОБНОВЛЕН ОТПУСК "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_HOLIDAY_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'HOLIDAY_TIME', GETDATE(), 
				   'ДОБАВЛЕН ОТПУСК "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_HOLIDAY_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ ОТПУСКА
CREATE TRIGGER HOLIDAY_TIME_TIME_DELETE ON HOLIDAY_TIME
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'HOLIDAY_TIME', GETDATE(), 
				   'УДАЛЕН ОТПУСК "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_HOLIDAY_DATE AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ БОЛЬНИЧНОГО
CREATE TRIGGER HOSPITAL_TIME_INSERT_UPDATE ON HOSPITAL_TIME
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'HOSPITAL_TIME', GETDATE(), 
				   'ОБНОВЛЕН БОЛЬНИЧНЫЙ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.DISEASED_ID) + '" ЗА ' + CAST(START_HOSPITAL_TIME AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'HOLIDAY_TIME', GETDATE(), 
				   'ДОБАВЛЕН БОЛЬНИЧНЫЙ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.DISEASED_ID) + '" ЗА ' + CAST(START_HOSPITAL_TIME AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ БОЛЬНИЧНОГО
CREATE TRIGGER HOSPITAL_TIME_TIME_DELETE ON HOSPITAL_TIME
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'HOSPITAL_TIME', GETDATE(), 
				   'УДАЛЕН БОЛЬНИЧНЫЙ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.DISEASED_ID) + '" ЗА ' + CAST(START_HOSPITAL_TIME AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ ПРОХОЖДЕНИЯ СЛУЖБЫ
CREATE TRIGGER MILITARY_PROCESS_INSERT_UPDATE ON MILITARY_PROCESS
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'MILITARY_PROCESS', GETDATE(), 
				   'ОБНОВЛЕНО ПРОХОЖДЕНИЕ СЛУЖБЫ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'MILITARY_PROCESS', GETDATE(), 
				   'ДОБАВЛЕНО ПРОХОЖДЕНИЕ СЛУЖБЫ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ ПРОХОЖДЕНИЯ СЛУЖБЫ
CREATE TRIGGER MILITARY_PROCESS_TIME_DELETE ON MILITARY_PROCESS
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'MILITARY_PROCESS', GETDATE(), 
				   'УДАЛЕНО ПРОХОЖДЕНИЕ СЛУЖБЫ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(START_DATE AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ ПРИСВОЕНИЯ ДОЛЖНОСТИ
CREATE TRIGGER POST_ASSIGNMENT_INSERT_UPDATE ON POST_ASSIGNMENT
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'POST_ASSIGNMENT', GETDATE(), 
				   'ОБНОВЛЕНО ПРИСВОЕНИЕ ДОЛЖНОСТИ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(ASSIGNMENT_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'POST_ASSIGNMENT', GETDATE(), 
				   'ДОБАВЛЕНО ПРИСВОЕНИЕ ДОЛЖНОСТИ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.EMPLOYEE_ID) + '" ЗА ' + CAST(ASSIGNMENT_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ ПРИСВОЕНИЯ ДОЛЖНОСТИ
CREATE TRIGGER POST_ASSIGNMENT_TIME_DELETE ON POST_ASSIGNMENT
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'POST_ASSIGNMENT', GETDATE(), 
				   'УДАЛЕНО ПРИСВОЕНИЕ ДОЛЖНОСТИ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(ASSIGNMENT_DATE AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ ПРИСВОЕНИЯ ЗВАНИЯ
CREATE TRIGGER RANK_ASSIGNMENT_INSERT_UPDATE ON RANK_ASSIGNMENT
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'RANK_ASSIGNMENT', GETDATE(), 
				   'ОБНОВЛЕНО ПРИСВОЕНИЕ ЗВАНИЯ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(ASSIGNMENT_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'RANK_ASSIGNMENT', GETDATE(), 
				   'ДОБАВЛЕНО ПРИСВОЕНИЕ ЗВАНИЯ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.EMPLOYEE_ID) + '" ЗА ' + CAST(ASSIGNMENT_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ ПРИСВОЕНИЯ ЗВАНИЯ
CREATE TRIGGER RANK_ASSIGNMENT_TIME_DELETE ON RANK_ASSIGNMENT
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'RANK_ASSIGNMENT', GETDATE(), 
				   'УДАЛЕНО ПРИСВОЕНИЕ ЗВАНИЯ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(ASSIGNMENT_DATE AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ РОДСТВЕННИКА
CREATE TRIGGER RELATIVE_INSERT_UPDATE ON RELATIVE
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'RELATIVE', GETDATE(), 
				   'ОБНОВЛЕНА ЗАПИСЬ О РОДСТВЕННИКЕ "'+ LAST_NAME + '"'
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'RELATIVE', GETDATE(), 
				   'ДОБАВЛЕН РОДСТВЕННИК "'+ LAST_NAME '"' 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ РОДСТВЕННИКА
CREATE TRIGGER RELATIVE_TIME_DELETE ON RELATIVE
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'RELATIVE', GETDATE(), 
				   'УДАЛЕНА ЗАПИСЬ О РОДСТВЕННИКЕ "'+ LAST_NAME + '"'
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ ВЫГОВОРА
CREATE TRIGGER REPRIMAND_INSERT_UPDATE ON REPRIMAND
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'REPRIMAND', GETDATE(), 
				   'ОБНОВЛЕН ВЫГОВОР "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(REPRIMAND_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'REPRIMAND', GETDATE(), 
				   'ДОБАВЛЕН ВЫГОВОР "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.EMPLOYEE_ID) + '" ЗА ' + CAST(REPRIMAND_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ ПРИСВОЕНИЯ ВЫГОВОРА
CREATE TRIGGER REPRIMAND_TIME_DELETE ON REPRIMAND
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'REPRIMAND', GETDATE(), 
				   'УДАЛЕН ВЫГОВОР "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(REPRIMAND_DATE AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ АТТЕСТАЦИИ
CREATE TRIGGER SERTIFICATION_INSERT_UPDATE ON SERTIFICATION
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'SERTIFICATION', GETDATE(), 
				   'ОБНОВЛЕНА АТТЕСТАЦИЯ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(SERTIFICATION_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'SERTIFICATION', GETDATE(), 
				   'ДОБАВЛЕНА АТТЕСТАЦИЯ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.EMPLOYEE_ID) + '" ЗА ' + CAST(SERTIFICATION_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ ПРИСВОЕНИЯ АТТЕСТАЦИИ
CREATE TRIGGER SERTIFICATION_TIME_DELETE ON SERTIFICATION
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'SERTIFICATION', GETDATE(), 
				   'УДАЛЕНА АТТЕСТАЦИЯ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.EMPLOYEE_ID) + '" ЗА ' + CAST(SERTIFICATION_DATE AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ СПЕЦИАЛЬНОСТИ
CREATE TRIGGER SPECIALITY_INSERT_UPDATE ON SPECIALITY
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'SPECIALITY', GETDATE(), 
				   'ОБНОВЛЕНА СПЕЦИАЛЬНОСТЬ "' + (SELECT SPECIALITY FROM SPECIALITY E WHERE E.ID = DELETED.ID) + '"'
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'SPECIALITY', GETDATE(), 
				   'ДОБАВЛЕНА СПЕЦИАЛЬНОСТЬ "' + (SELECT SPECIALITY FROM SPECIALITY E WHERE E.ID = INSERTED.ID) + '"'
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ СПЕЦИАЛЬНОСТИ
CREATE TRIGGER SPECIALITY_DELETE ON SPECIALITY
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'SPECIALITY', GETDATE(), 
				   'УДАЛЕНА СПЕЦИАЛЬНОСТЬ "' + SPECIALITY + '"'
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ СОТРУДНИКА
CREATE TRIGGER EMPLOYEE_INSERT_UPDATE ON EMPLOYEE
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'EMPLOYEE', GETDATE(), 
				   'ОБНОВЛЕНА ЗАПИСЬ О СОТРУДНИКЕ "' + (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE E WHERE E.ID = DELETED.ID) + '"'
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'EMPLOYEE', GETDATE(), 
				   'ДОБАВЛЕНА ЗАПИСЬ О СОТРУДНИКЕ "' + (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE E WHERE E.ID = INSERTED.ID) + '"'
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ СОТРУДНИКА
CREATE TRIGGER EMPLOYEE_DELETE ON EMPLOYEE
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'EMPLOYEE', GETDATE(), 
				   'УДАЛЕНА ЗАПИСЬ О СОТРУДНИКЕ "' + EMPLOYEE_LASTNAME + '"'
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ НАРУШЕНИЯ
CREATE TRIGGER VIOLATION_INSERT_UPDATE ON VIOLATION
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'VIOLATION', GETDATE(), 
				   'ОБНОВЛЕНО НАРУШЕНИЕ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.VIOLATOR_ID) + '" ЗА ' + CAST(VIOLATION_DATE AS VARCHAR(20)) 
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'VIOLATION', GETDATE(), 
				   'ДОБАВЛЕНО НАРУШЕНИЕ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = INSERTED.VIOLATOR_ID) + '" ЗА ' + CAST(VIOLATION_DATE AS VARCHAR(20)) 
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ НАРУШЕНИЯ
CREATE TRIGGER VIOLATION_TIME_DELETE ON VIOLATION
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'VIOLATION', GETDATE(), 
				   'УДАЛЕНО НАРУШЕНИЕ "'+ (SELECT EMPLOYEE_LASTNAME FROM EMPLOYEE EMPL WHERE EMPL.ID = DELETED.VIOLATOR_ID) + '" ЗА ' + CAST(VIOLATION_DATE AS VARCHAR(20)) 
			FROM DELETED
GO
--ПИШЕМ В ЛОГ ПРИ ДОБАВЛЕНИИ/ОБНОВЛЕНИИ ВОИНСКОЙ ЧАСТИ
CREATE TRIGGER MILITARY_UNIT_INSERT_UPDATE ON MILITARY_UNIT
AFTER INSERT, UPDATE
AS
	IF (SELECT COUNT(*) FROM INSERTED) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM DELETED) > 0
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'UPDATE', 'MILITARY_UNIT', GETDATE(), 
				   'ОБНОВЛЕНА ЗАПИСЬ О ВОИНСКОЙ ЧАСТИ "' + (SELECT MILITARY_NAME FROM MILITARY_UNIT E WHERE E.ID = DELETED.ID) + '"'
			FROM DELETED
		ELSE 
			INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'INSERT', 'MILITARY_UNIT', GETDATE(), 
				   'ДОБАВЛЕНА ЗАПИСЬ О ВОИНСКОЙ ЧАСТИ "' + (SELECT MILITARY_NAME FROM MILITARY_UNIT E WHERE E.ID = INSERTED.ID) + '"'
			FROM INSERTED
	END
GO
--ПИШЕМ В ЛОГ ПРИ УДАЛЕНИИ ВОИНСКОЙ ЧАСТИ
CREATE TRIGGER MILITARY_UNIT_DELETE ON MILITARY_UNIT
AFTER DELETE
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		INSERT INTO OPERATIONS_LOG(OPERATION_TYPE, TABLENAME, OPERATION_TIME, DESCRIPTION)  
			SELECT 'DELETE', 'MILITARY_UNIT', GETDATE(), 
				   'УДАЛЕНА ЗАПИСЬ О ВОИНСКОЙ ЧАСТИ "' + MILITARY_NAME + '"'
			FROM DELETED
GO
-------------------------------------------------------------------------
---FUNCTIONS
-------------------------------------------------------------------------
--ВОЗВРАЩАЕТ КОЛИЧЕСТВО ДНЕЙ, ПРОВЕДЕННЫХ В ОТПУСКЕ
--@EMPLOYEE_ID - ID СОТРУДНИКА
CREATE FUNCTION GET_HOLIDAY_DAYS(@EMPLOYEE_ID INT)
	RETURNS INT
AS
BEGIN
	DECLARE @HOLIDAY_START DATETIME,
			@HOLIDAY_FINISH DATETIME,
			@ALL_DAYS INT = 0;
	DECLARE HOLIDAYS CURSOR FOR
							SELECT START_HOLIDAY_DATE, FINISH_HOLIDAY_DATE 
							FROM HOLIDAY_TIME
							WHERE EMPLOYEE_ID = @EMPLOYEE_ID;
			
	OPEN HOLIDAYS
		FETCH HOLIDAYS INTO @HOLIDAY_START, @HOLIDAY_FINISH;
		WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @ALL_DAYS = @ALL_DAYS + DATEDIFF(DAY, @HOLIDAY_START, @HOLIDAY_FINISH);
				FETCH HOLIDAYS INTO @HOLIDAY_START, @HOLIDAY_FINISH; 
			END
	CLOSE HOLIDAYS;	
	DEALLOCATE HOLIDAYS;

	RETURN @ALL_DAYS;
END

GO

--ВОЗВРАЩАЕТ КОЛИЧЕСТВО ДНЕЙ, ПРОВЕДЕННЫХ НА БОЛЬНИЧНОМ
--@EMPLOYEE_ID - ID СОТРУДНИКА
CREATE FUNCTION GET_HOSPITAL_DAYS(@EMPLOYEE_ID INT)
	RETURNS INT
AS
BEGIN
	DECLARE @HOSPITAL_START DATETIME,
			@HOSPITAL_FINISH DATETIME,
			@ALL_DAYS INT = 0;
	DECLARE HOSPITALS CURSOR FOR
							SELECT START_HOSPITAL_TIME, FINISH_HOSPITAL_TIME
							FROM HOSPITAL_TIME
							WHERE DISEASED_ID = @EMPLOYEE_ID;
			
	OPEN HOSPITALS
		FETCH HOSPITALS INTO @HOSPITAL_START, @HOSPITAL_FINISH;
		WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @ALL_DAYS = @ALL_DAYS + DATEDIFF(DAY, @HOSPITAL_START, @HOSPITAL_FINISH);
				FETCH HOSPITALS INTO @HOSPITAL_START, @HOSPITAL_FINISH; 
			END
	CLOSE HOSPITALS;	
	DEALLOCATE HOSPITALS;

	RETURN @ALL_DAYS;
END

GO

--ВОЗВРАЩАЕТ ВЫСЛУГУ ЛЕТ В ДНЯХ ДЛЯ КОНКРЕТНОГО СЛУЖАЩЕГО
--NULL - ЕСЛИ СЛУЖАЩИЙ НЕ НАЙДЕН
CREATE FUNCTION GET_EXPIRIENCE_DAYS(@EMPLOYEE_ID INT)
	RETURNS INT
AS
BEGIN
	DECLARE @START_DATE DATETIME = (SELECT JOB_START_DATE FROM EMPLOYEE WHERE ID = @EMPLOYEE_ID),	--ДАТА НАЧАЛА СЛУЖБЫ
			@FINISH_DATE DATETIME = GETDATE();	--ТЕКУЩАЯ ДАТА
	DECLARE @ALL_DAYS INT = DATEDIFF(DAY, @START_DATE, @FINISH_DATE);--РАЗНИЦА МЕЖДУ НАЧАЛОМ СЛУЖБЫ И ТЕКУЩЕЙ ДАТОЙ В ДНЯХ
			 
	SET @ALL_DAYS = @ALL_DAYS - DBO.GET_HOLIDAY_DAYS(@EMPLOYEE_ID) - DBO.GET_HOSPITAL_DAYS(@EMPLOYEE_ID);
	
	RETURN @ALL_DAYS;
END

GO
-------------------------------------------------------------------------
---EOF
-------------------------------------------------------------------------